{"version":3,"sources":["recentlyaccessedcourses.js"],"names":["define","$","CustomEvents","Notification","PubSub","PagedContentPagingBar","Templates","CourseEvents","CoursesRepository","SELECTORS","BLOCK_CONTAINER","CARD_CONTAINER","COURSE_IS_FAVOURITE","CONTENT","EMPTY_MESSAGE","LOADING_PLACEHOLDER","contentLoaded","allCourses","loadContent","userid","getLastAccessedCourses","then","courses","showcoursecategory","data","promises","map","course","render","when","apply","renderedCourses","forEach","promise","html","push","exception","renderAllCourses","renderCourses","root","container","find","pagingBar","PAGING_BAR","css","attr","hidePagingBar","is","slick","colors","each","index","element","length","dots","arrows","infinite","rtl","opacity","speed","slidesToShow","slidesToScroll","responsive","breakpoint","settings","registerEventListeners","resizeTimeout","drawerToggling","subscribe","favourited","courseId","removeClass","favouriteCourse","unfavorited","addClass","unfavouriteCourse","recalculationCount","doRecalculation","setTimeout","window","on","init","showContent","showEmptyMessage"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript to initialise the Recently accessed courses block.\n *\n * @module     block_recentlyaccessedcourses/main.js\n * @package    block_recentlyaccessedcourses\n * @copyright  2018 Victor Deniz <victor@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\"use strict\";\ndefine(\n    [\n        'jquery',\n        'core/custom_interaction_events',\n        'core/notification',\n        'core/pubsub',\n        'core/paged_content_paging_bar',\n        'core/templates',\n        'core_course/events',\n        'core_course/repository',\n        'theme_remui/slick'\n    ],\n    function(\n        $,\n        CustomEvents,\n        Notification,\n        PubSub,\n        PagedContentPagingBar,\n        Templates,\n        CourseEvents,\n        CoursesRepository\n    ) {\n\n        // Constants.\n        var NUM_COURSES_TOTAL = 10;\n        var SELECTORS = {\n            BLOCK_CONTAINER: '[data-region=\"recentlyaccessedcourses\"]',\n            CARD_CONTAINER: '[data-region=\"card-deck\"]',\n            COURSE_IS_FAVOURITE: '[data-region=\"is-favourite\"]',\n            CONTENT: '[data-region=\"view-content\"]',\n            EMPTY_MESSAGE: '[data-region=\"empty-message\"]',\n            LOADING_PLACEHOLDER: '[data-region=\"loading-placeholder\"]',\n        };\n        // Module variables.\n        var contentLoaded = false;\n        var allCourses = [];\n\n        /**\n         * Show the empty message when no course are found.\n         *\n         * @param {object} root The root element for the courses view.\n         */\n        var showEmptyMessage = function(root) {\n            root.find(SELECTORS.EMPTY_MESSAGE).removeClass('hidden');\n            root.find(SELECTORS.LOADING_PLACEHOLDER).addClass('hidden');\n            root.find(SELECTORS.CONTENT).addClass('hidden');\n        };\n\n        /**\n         * Show the empty message when no course are found.\n         *\n         * @param {object} root The root element for the courses view.\n         */\n        var showContent = function(root) {\n            root.find(SELECTORS.CONTENT).removeClass('hidden');\n            root.find(SELECTORS.EMPTY_MESSAGE).addClass('hidden');\n            root.find(SELECTORS.LOADING_PLACEHOLDER).addClass('hidden');\n        };\n\n        /**\n         * Hide the paging bar.\n         *\n         * @param {object} root The root element for the courses view.\n         */\n        var hidePagingBar = function(root) {\n            var pagingBar = root.find(SELECTORS.PAGING_BAR);\n            pagingBar.css('opacity', 0);\n            pagingBar.css('visibility', 'hidden');\n            pagingBar.attr('aria-hidden', 'true');\n        };\n\n        /**\n         * Show the favourite indicator for the given course (if it's in the list).\n         *\n         * @param {object} root The root element for the courses view.\n         * @param {number} courseId The id of the course to be favourited.\n         */\n        var favouriteCourse = function(root, courseId) {\n            allCourses.forEach(function(course) {\n                if (course.attr('data-course-id') == courseId) {\n                    course.find(SELECTORS.COURSE_IS_FAVOURITE).removeClass('hidden');\n                }\n            });\n        };\n\n        /**\n         * Hide the favourite indicator for the given course (if it's in the list).\n         *\n         * @param {object} root The root element for the courses view.\n         * @param {number} courseId The id of the course to be unfavourited.\n         */\n        var unfavouriteCourse = function(root, courseId) {\n            allCourses.forEach(function(course) {\n                if (course.attr('data-course-id') == courseId) {\n                    course.find(SELECTORS.COURSE_IS_FAVOURITE).addClass('hidden');\n                }\n            });\n        };\n\n        /**\n         * Render the a list of courses.\n         *\n         * @param {array} courses containing array of courses.\n         * @return {promise} Resolved with list of rendered courses as jQuery objects.\n         */\n        var renderAllCourses = function(courses) {\n            var showcoursecategory = $(SELECTORS.BLOCK_CONTAINER).data('displaycoursecategory');\n            var promises = courses.map(function(course) {\n                course.showcoursecategory = showcoursecategory;\n                return Templates.render('block_recentlyaccessedcourses/course-card', course);\n            });\n\n            return $.when.apply(null, promises).then(function() {\n                var renderedCourses = [];\n\n                promises.forEach(function(promise) {\n                    promise.then(function(html) {\n                        renderedCourses.push($(html));\n                        return;\n                    })\n                    .catch(Notification.exception);\n                });\n\n                return renderedCourses;\n            });\n        };\n\n        /**\n         * Fetch user's recently accessed courses and reload the content of the block.\n         *\n         * @param {int} userid User whose courses will be shown\n         * @returns {promise} The updated content for the block.\n         */\n        var loadContent = function(userid) {\n            return CoursesRepository.getLastAccessedCourses(userid, NUM_COURSES_TOTAL)\n                .then(function(courses) {\n                    return renderAllCourses(courses);\n                });\n        };\n\n        /**\n         * Recalculate the number of courses that should be visible.\n         *\n         * @param {object} root The root element for the courses view.\n         */\n        var renderCourses = function(root) {\n            var container = root.find(SELECTORS.CONTENT).find(SELECTORS.CARD_CONTAINER);\n\n            // Don't bother updating the DOM unless the visible courses have changed.\n            hidePagingBar(root);\n            if (container.is('.slick-initialized')) {\n                container.slick('unslick');\n            }\n            container.html(allCourses);\n            $('.block_recentlyaccessedcourses .dashboard-card-deck').css(\"overflow\", \"unset\");\n\n            // TODO  make the colors global var, so can be used without duplication.\n            var colors = ['#f39f45', '#f95e5f', '#2fb0bf', '#2fb786', '#526069', '#46657d'];\n            $('.block_recentlyaccessedcourses .wdm-course-card-body').each(function(index, element) {\n                index = index >= colors.length ? index % colors.length : index;\n                $(element).css('background-color', colors[index]);\n            });\n            container.slick({\n                dots: false,\n                arrows: true,\n                infinite: false,\n                rtl: ($(\"html\").attr(\"dir\") == \"rtl\") ? true : false,\n                opacity: 0,\n                speed: 500,\n                slidesToShow: 4,\n                slidesToScroll: 4,\n                responsive: [{\n                    breakpoint: 1024,\n                    settings: {\n                        slidesToShow: 3,\n                        slidesToScroll: 3\n                    }\n                }, {\n                    breakpoint: 800,\n                    settings: {\n                        slidesToShow: 2,\n                        slidesToScroll: 2\n                    }\n                }, {\n                    breakpoint: 480,\n                    settings: {\n                        slidesToShow: 1,\n                        slidesToScroll: 1\n                    }\n                }]\n            });\n        };\n\n        /**\n         * Register event listeners for the block.\n         *\n         * @param {object} root The root element for the recentlyaccessedcourses block.\n         */\n        var registerEventListeners = function(root) {\n            var resizeTimeout = null;\n            var drawerToggling = false;\n\n            PubSub.subscribe(CourseEvents.favourited, function(courseId) {\n                favouriteCourse(root, courseId);\n            });\n\n            PubSub.subscribe(CourseEvents.unfavorited, function(courseId) {\n                unfavouriteCourse(root, courseId);\n            });\n\n            PubSub.subscribe('nav-drawer-toggle-start', function() {\n                if (!contentLoaded || !allCourses.length || drawerToggling) {\n                    // Nothing to recalculate.\n                    return;\n                }\n\n                drawerToggling = true;\n                var recalculationCount = 0;\n                // This function is going to recalculate the number of courses while\n                // the nav drawer is opening or closes (up to a maximum of 5 recalcs).\n                var doRecalculation = function() {\n                    setTimeout(function() {\n                        renderCourses(root);\n                        recalculationCount++;\n\n                        if (recalculationCount < 5 && drawerToggling) {\n                            // If we haven't done too many recalculations and the drawer\n                            // is still toggling then recurse.\n                            doRecalculation();\n                        }\n                    }, 100);\n                };\n\n                // Start the recalculations.\n                doRecalculation(root);\n            });\n\n            PubSub.subscribe('nav-drawer-toggle-end', function() {\n                drawerToggling = false;\n            });\n\n            $(window).on('resize', function() {\n                if (!contentLoaded || !allCourses.length) {\n                    // Nothing to reclculate.\n                    return;\n                }\n\n                // Resize events fire rapidly so recalculating the visible courses each.\n                // Time can be expensive. Let's debounce them.\n                if (!resizeTimeout) {\n                    resizeTimeout = setTimeout(function() {\n                        resizeTimeout = null;\n                        renderCourses(root);\n                        // The renderCourses function will execute at a rate of 15fps.\n                    }, 66);\n                }\n            });\n        };\n\n        /**\n         * Get and show the recent courses into the block.\n         *\n         * @param {int} userid User from which the courses will be obtained\n         * @param {object} root The root element for the recentlyaccessedcourses block.\n         */\n        var init = function(userid, root) {\n            root = $(root);\n\n            registerEventListeners(root);\n            loadContent(userid)\n                .then(function(renderedCourses) {\n                    allCourses = renderedCourses;\n                    contentLoaded = true;\n\n                    if (allCourses.length) {\n                        showContent(root);\n                        renderCourses(root);\n                    } else {\n                        showEmptyMessage(root);\n                    }\n\n                    return;\n                })\n                .catch(Notification.exception);\n        };\n\n        return {\n            init: init\n        };\n    });\n"],"file":"recentlyaccessedcourses.min.js"}